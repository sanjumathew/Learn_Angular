{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n}); // eslint-disable-next-line import/no-extraneous-dependencies\n\nconst core_1 = require(\"@angular/core\");\n\nconst operators_1 = require(\"rxjs/operators\");\n\nfunction default_1(mod) {\n  if (!mod['hot']) {\n    return;\n  }\n\n  if (!(0, core_1.isDevMode)()) {\n    console.error(`[NG HMR] Cannot use HMR when Angular is running in production mode. To prevent production mode, do not call 'enableProdMode()'.`);\n    return;\n  }\n\n  mod['hot'].accept();\n  mod['hot'].dispose(() => {\n    if (typeof ng === 'undefined') {\n      console.warn(`[NG HMR] Cannot find global 'ng'. Likely this is caused because scripts optimization is enabled.`);\n      return;\n    }\n\n    if (!ng.getInjector) {\n      // View Engine\n      return;\n    } // Reset JIT compiled components cache\n\n\n    (0, core_1.ɵresetCompiledComponents)();\n    const appRoot = getAppRoot();\n\n    if (!appRoot) {\n      return;\n    }\n\n    const appRef = getApplicationRef(appRoot);\n\n    if (!appRef) {\n      return;\n    } // Inputs that are hidden should be ignored\n\n\n    const oldInputs = document.querySelectorAll('input:not([type=\"hidden\"]), textarea');\n    const oldOptions = document.querySelectorAll('option'); // Create new application\n\n    appRef.components.forEach(cp => {\n      const element = cp.location.nativeElement;\n      const parentNode = element.parentNode;\n      parentNode.insertBefore(document.createElement(element.tagName), element);\n      parentNode.removeChild(element);\n    }); // Destroy old application, injectors, <style..., etc..\n\n    const platformRef = getPlatformRef(appRoot);\n\n    if (platformRef) {\n      platformRef.destroy();\n    } // Restore all inputs and options\n\n\n    const bodyElement = document.body;\n\n    if (oldInputs.length + oldOptions.length === 0 || !bodyElement) {\n      return;\n    } // Use a `MutationObserver` to wait until the app-root element has been bootstrapped.\n    // ie: when the ng-version attribute is added.\n\n\n    new MutationObserver((_mutationsList, observer) => {\n      observer.disconnect();\n      const newAppRoot = getAppRoot();\n\n      if (!newAppRoot) {\n        return;\n      }\n\n      const newAppRef = getApplicationRef(newAppRoot);\n\n      if (!newAppRef) {\n        return;\n      } // Wait until the application isStable to restore the form values\n\n\n      newAppRef.isStable.pipe((0, operators_1.filter)(isStable => !!isStable), (0, operators_1.take)(1)).subscribe(() => restoreFormValues(oldInputs, oldOptions));\n    }).observe(bodyElement, {\n      attributes: true,\n      subtree: true,\n      attributeFilter: ['ng-version']\n    });\n  });\n}\n\nexports.default = default_1;\n\nfunction getAppRoot() {\n  const appRoot = document.querySelector('[ng-version]');\n\n  if (!appRoot) {\n    console.warn('[NG HMR] Cannot find the application root component.');\n    return undefined;\n  }\n\n  return appRoot;\n}\n\nfunction getToken(appRoot, token) {\n  return typeof ng === 'object' && ng.getInjector(appRoot).get(token) || undefined;\n}\n\nfunction getApplicationRef(appRoot) {\n  const appRef = getToken(appRoot, core_1.ApplicationRef);\n\n  if (!appRef) {\n    console.warn(`[NG HMR] Cannot get 'ApplicationRef'.`);\n    return undefined;\n  }\n\n  return appRef;\n}\n\nfunction getPlatformRef(appRoot) {\n  const platformRef = getToken(appRoot, core_1.PlatformRef);\n\n  if (!platformRef) {\n    console.warn(`[NG HMR] Cannot get 'PlatformRef'.`);\n    return undefined;\n  }\n\n  return platformRef;\n}\n\nfunction dispatchEvents(element) {\n  element.dispatchEvent(new Event('input', {\n    bubbles: true,\n    cancelable: true\n  }));\n  element.blur();\n  element.dispatchEvent(new KeyboardEvent('keyup', {\n    key: 'Enter'\n  }));\n}\n\nfunction restoreFormValues(oldInputs, oldOptions) {\n  // Restore input that are not hidden\n  const newInputs = document.querySelectorAll('input:not([type=\"hidden\"]), textarea');\n\n  if (newInputs.length && newInputs.length === oldInputs.length) {\n    console.log('[NG HMR] Restoring input/textarea values.');\n\n    for (let index = 0; index < newInputs.length; index++) {\n      const newElement = newInputs[index];\n      const oldElement = oldInputs[index];\n\n      switch (oldElement.type) {\n        case 'button':\n        case 'image':\n        case 'submit':\n        case 'reset':\n          // These types don't need any value change.\n          continue;\n\n        case 'radio':\n        case 'checkbox':\n          newElement.checked = oldElement.checked;\n          break;\n\n        case 'color':\n        case 'date':\n        case 'datetime-local':\n        case 'email':\n        case 'hidden':\n        case 'month':\n        case 'number':\n        case 'password':\n        case 'range':\n        case 'search':\n        case 'tel':\n        case 'text':\n        case 'textarea':\n        case 'time':\n        case 'url':\n        case 'week':\n          newElement.value = oldElement.value;\n          break;\n\n        case 'file':\n          // Ignored due: Uncaught DOMException: Failed to set the 'value' property on 'HTMLInputElement':\n          // This input element accepts a filename, which may only be programmatically set to the empty string.\n          break;\n\n        default:\n          console.warn('[NG HMR] Unknown input type ' + oldElement.type + '.');\n          continue;\n      }\n\n      dispatchEvents(newElement);\n    }\n  } else if (oldInputs.length) {\n    console.warn('[NG HMR] Cannot restore input/textarea values.');\n  } // Restore option\n\n\n  const newOptions = document.querySelectorAll('option');\n\n  if (newOptions.length && newOptions.length === oldOptions.length) {\n    console.log('[NG HMR] Restoring selected options.');\n\n    for (let index = 0; index < newOptions.length; index++) {\n      const newElement = newOptions[index];\n      newElement.selected = oldOptions[index].selected;\n      dispatchEvents(newElement);\n    }\n  } else if (oldOptions.length) {\n    console.warn('[NG HMR] Cannot restore selected options.');\n  }\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","core_1","require","operators_1","default_1","mod","isDevMode","console","error","accept","dispose","ng","warn","getInjector","ɵresetCompiledComponents","appRoot","getAppRoot","appRef","getApplicationRef","oldInputs","document","querySelectorAll","oldOptions","components","forEach","cp","element","location","nativeElement","parentNode","insertBefore","createElement","tagName","removeChild","platformRef","getPlatformRef","destroy","bodyElement","body","length","MutationObserver","_mutationsList","observer","disconnect","newAppRoot","newAppRef","isStable","pipe","filter","take","subscribe","restoreFormValues","observe","attributes","subtree","attributeFilter","default","querySelector","undefined","getToken","token","get","ApplicationRef","PlatformRef","dispatchEvents","dispatchEvent","Event","bubbles","cancelable","blur","KeyboardEvent","key","newInputs","log","index","newElement","oldElement","type","checked","newOptions","selected"],"sources":["D:/Projects/Personal Projects/Learn-Angular/node_modules/@angular-devkit/build-angular/src/webpack/plugins/hmr/hmr-accept.js"],"sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// eslint-disable-next-line import/no-extraneous-dependencies\nconst core_1 = require(\"@angular/core\");\nconst operators_1 = require(\"rxjs/operators\");\nfunction default_1(mod) {\n    if (!mod['hot']) {\n        return;\n    }\n    if (!(0, core_1.isDevMode)()) {\n        console.error(`[NG HMR] Cannot use HMR when Angular is running in production mode. To prevent production mode, do not call 'enableProdMode()'.`);\n        return;\n    }\n    mod['hot'].accept();\n    mod['hot'].dispose(() => {\n        if (typeof ng === 'undefined') {\n            console.warn(`[NG HMR] Cannot find global 'ng'. Likely this is caused because scripts optimization is enabled.`);\n            return;\n        }\n        if (!ng.getInjector) {\n            // View Engine\n            return;\n        }\n        // Reset JIT compiled components cache\n        (0, core_1.ɵresetCompiledComponents)();\n        const appRoot = getAppRoot();\n        if (!appRoot) {\n            return;\n        }\n        const appRef = getApplicationRef(appRoot);\n        if (!appRef) {\n            return;\n        }\n        // Inputs that are hidden should be ignored\n        const oldInputs = document.querySelectorAll('input:not([type=\"hidden\"]), textarea');\n        const oldOptions = document.querySelectorAll('option');\n        // Create new application\n        appRef.components.forEach((cp) => {\n            const element = cp.location.nativeElement;\n            const parentNode = element.parentNode;\n            parentNode.insertBefore(document.createElement(element.tagName), element);\n            parentNode.removeChild(element);\n        });\n        // Destroy old application, injectors, <style..., etc..\n        const platformRef = getPlatformRef(appRoot);\n        if (platformRef) {\n            platformRef.destroy();\n        }\n        // Restore all inputs and options\n        const bodyElement = document.body;\n        if (oldInputs.length + oldOptions.length === 0 || !bodyElement) {\n            return;\n        }\n        // Use a `MutationObserver` to wait until the app-root element has been bootstrapped.\n        // ie: when the ng-version attribute is added.\n        new MutationObserver((_mutationsList, observer) => {\n            observer.disconnect();\n            const newAppRoot = getAppRoot();\n            if (!newAppRoot) {\n                return;\n            }\n            const newAppRef = getApplicationRef(newAppRoot);\n            if (!newAppRef) {\n                return;\n            }\n            // Wait until the application isStable to restore the form values\n            newAppRef.isStable\n                .pipe((0, operators_1.filter)((isStable) => !!isStable), (0, operators_1.take)(1))\n                .subscribe(() => restoreFormValues(oldInputs, oldOptions));\n        }).observe(bodyElement, {\n            attributes: true,\n            subtree: true,\n            attributeFilter: ['ng-version'],\n        });\n    });\n}\nexports.default = default_1;\nfunction getAppRoot() {\n    const appRoot = document.querySelector('[ng-version]');\n    if (!appRoot) {\n        console.warn('[NG HMR] Cannot find the application root component.');\n        return undefined;\n    }\n    return appRoot;\n}\nfunction getToken(appRoot, token) {\n    return (typeof ng === 'object' && ng.getInjector(appRoot).get(token)) || undefined;\n}\nfunction getApplicationRef(appRoot) {\n    const appRef = getToken(appRoot, core_1.ApplicationRef);\n    if (!appRef) {\n        console.warn(`[NG HMR] Cannot get 'ApplicationRef'.`);\n        return undefined;\n    }\n    return appRef;\n}\nfunction getPlatformRef(appRoot) {\n    const platformRef = getToken(appRoot, core_1.PlatformRef);\n    if (!platformRef) {\n        console.warn(`[NG HMR] Cannot get 'PlatformRef'.`);\n        return undefined;\n    }\n    return platformRef;\n}\nfunction dispatchEvents(element) {\n    element.dispatchEvent(new Event('input', {\n        bubbles: true,\n        cancelable: true,\n    }));\n    element.blur();\n    element.dispatchEvent(new KeyboardEvent('keyup', { key: 'Enter' }));\n}\nfunction restoreFormValues(oldInputs, oldOptions) {\n    // Restore input that are not hidden\n    const newInputs = document.querySelectorAll('input:not([type=\"hidden\"]), textarea');\n    if (newInputs.length && newInputs.length === oldInputs.length) {\n        console.log('[NG HMR] Restoring input/textarea values.');\n        for (let index = 0; index < newInputs.length; index++) {\n            const newElement = newInputs[index];\n            const oldElement = oldInputs[index];\n            switch (oldElement.type) {\n                case 'button':\n                case 'image':\n                case 'submit':\n                case 'reset':\n                    // These types don't need any value change.\n                    continue;\n                case 'radio':\n                case 'checkbox':\n                    newElement.checked = oldElement.checked;\n                    break;\n                case 'color':\n                case 'date':\n                case 'datetime-local':\n                case 'email':\n                case 'hidden':\n                case 'month':\n                case 'number':\n                case 'password':\n                case 'range':\n                case 'search':\n                case 'tel':\n                case 'text':\n                case 'textarea':\n                case 'time':\n                case 'url':\n                case 'week':\n                    newElement.value = oldElement.value;\n                    break;\n                case 'file':\n                    // Ignored due: Uncaught DOMException: Failed to set the 'value' property on 'HTMLInputElement':\n                    // This input element accepts a filename, which may only be programmatically set to the empty string.\n                    break;\n                default:\n                    console.warn('[NG HMR] Unknown input type ' + oldElement.type + '.');\n                    continue;\n            }\n            dispatchEvents(newElement);\n        }\n    }\n    else if (oldInputs.length) {\n        console.warn('[NG HMR] Cannot restore input/textarea values.');\n    }\n    // Restore option\n    const newOptions = document.querySelectorAll('option');\n    if (newOptions.length && newOptions.length === oldOptions.length) {\n        console.log('[NG HMR] Restoring selected options.');\n        for (let index = 0; index < newOptions.length; index++) {\n            const newElement = newOptions[index];\n            newElement.selected = oldOptions[index].selected;\n            dispatchEvents(newElement);\n        }\n    }\n    else if (oldOptions.length) {\n        console.warn('[NG HMR] Cannot restore selected options.');\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}